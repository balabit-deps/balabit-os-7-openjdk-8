# HG changeset patch
# User igerasim
# Date 1538201050 25200
#      Fri Sep 28 23:04:10 2018 -0700
# Node ID 01337312ad1e388d6131948254b5420798624caf
# Parent  2cf0eb69a28826b6b21c2d8da3947d1d204715f3
8206290: Better FileChannel transfer performance
Reviewed-by: alanb, rhalade, mschoene

diff -r 2cf0eb69a288 -r 01337312ad1e src/share/classes/sun/nio/ch/FileChannelImpl.java
--- openjdk/jdk/src/share/classes/sun/nio/ch/FileChannelImpl.java	Mon Sep 17 15:06:15 2018 +0100
+++ openjdk/jdk/src/share/classes/sun/nio/ch/FileChannelImpl.java	Fri Sep 28 23:04:10 2018 -0700
@@ -551,11 +551,10 @@
     {
         // Untrusted target: Use a newly-erased buffer
         int c = Math.min(icount, TRANSFER_SIZE);
-        ByteBuffer bb = Util.getTemporaryDirectBuffer(c);
+        ByteBuffer bb = ByteBuffer.allocate(c);
         long tw = 0;                    // Total bytes written
         long pos = position;
         try {
-            Util.erase(bb);
             while (tw < icount) {
                 bb.limit(Math.min((int)(icount - tw), TRANSFER_SIZE));
                 int nr = read(bb, pos);
@@ -576,8 +575,6 @@
             if (tw > 0)
                 return tw;
             throw x;
-        } finally {
-            Util.releaseTemporaryDirectBuffer(bb);
         }
     }
 
@@ -661,11 +658,10 @@
     {
         // Untrusted target: Use a newly-erased buffer
         int c = (int)Math.min(count, TRANSFER_SIZE);
-        ByteBuffer bb = Util.getTemporaryDirectBuffer(c);
+        ByteBuffer bb = ByteBuffer.allocate(c);
         long tw = 0;                    // Total bytes written
         long pos = position;
         try {
-            Util.erase(bb);
             while (tw < count) {
                 bb.limit((int)Math.min((count - tw), (long)TRANSFER_SIZE));
                 // ## Bug: Will block reading src if this channel
@@ -686,8 +682,6 @@
             if (tw > 0)
                 return tw;
             throw x;
-        } finally {
-            Util.releaseTemporaryDirectBuffer(bb);
         }
     }
 
