# HG changeset patch
# User robm
# Date 1531238182 -3600
#      Tue Jul 10 16:56:22 2018 +0100
# Node ID 28d4d67065abcb92ac1e4f217b733d7c1d13cb61
# Parent  c1cffa411ed5346207e195c642b2fbcb0ca650a3
8199177: Enhance JNDI lookups
Reviewed-by: vtewari

diff -r c1cffa411ed5 -r 28d4d67065ab src/share/classes/com/sun/naming/internal/VersionHelper12.java
--- openjdk/jdk/src/share/classes/com/sun/naming/internal/VersionHelper12.java	Tue Jul 10 16:20:45 2018 +0300
+++ openjdk/jdk/src/share/classes/com/sun/naming/internal/VersionHelper12.java	Tue Jul 10 16:56:22 2018 +0100
@@ -62,6 +62,25 @@
     }
 
     /**
+     * Determines whether classes may be loaded from an arbitrary URL code base.
+     */
+    private static final String TRUST_URL_CODEBASE_PROPERTY =
+            "com.sun.jndi.ldap.object.trustURLCodebase";
+    private static final String trustURLCodebase =
+            AccessController.doPrivileged(
+                new PrivilegedAction<String>() {
+                    public String run() {
+                        try {
+                        return System.getProperty(TRUST_URL_CODEBASE_PROPERTY,
+                            "false");
+                        } catch (SecurityException e) {
+                        return "false";
+                        }
+                    }
+                }
+            );
+
+    /**
      * Package private.
      *
      * This internal method is used with Thread Context Class Loader (TCCL),
@@ -79,12 +98,15 @@
      */
     public Class<?> loadClass(String className, String codebase)
             throws ClassNotFoundException, MalformedURLException {
+        if ("true".equalsIgnoreCase(trustURLCodebase)) {
+            ClassLoader parent = getContextClassLoader();
+            ClassLoader cl =
+                    URLClassLoader.newInstance(getUrlArray(codebase), parent);
 
-        ClassLoader parent = getContextClassLoader();
-        ClassLoader cl =
-                 URLClassLoader.newInstance(getUrlArray(codebase), parent);
-
-        return loadClass(className, cl);
+            return loadClass(className, cl);
+        } else {
+            return null;
+        }
     }
 
     String getJndiProperty(final int i) {
